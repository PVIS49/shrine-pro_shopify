<div id="cvs-{{ section.id }}-{{ block.id }}" class="custom-variant-selector">

  {% assign displayed_variants = product.variants | slice: 0, 3 %}

  {% for variant in displayed_variants %}
    <label class="custom-variant-selector__block{% if forloop.first %} selected{% endif %}"
       data-variant-id="{{ variant.id }}"
       data-o1="{{ variant.option1 | escape }}"
       data-o2="{{ variant.option2 | escape }}"
       data-o3="{{ variant.option3 | escape }}">

      <span class="variant-indicator"></span>
      <input type="radio" name="custom_variant_id" class="hidden-radio" value="{{ variant.id }}" {% if forloop.first %}checked{% endif %}>
      <div class="variant-card">
        {% if forloop.index == 2 %}
  <div class="variant-badge">Économisez 50€</div>
{% endif %}

    {% if variant.metafields.custom.custom_image %}
  <img
    src="{{ variant.metafields.custom.custom_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% elsif variant.featured_media %}
  <img
    src="{{ variant.featured_media.preview_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% endif %}


        <p class="variant-label">{{ variant.title }}</p>
<div class="variant-price">
  {% if variant.compare_at_price > variant.price %}
    <span class="old-price">{{ variant.compare_at_price | money }}</span>
  {% endif %}
  <span class="current-price">{{ variant.price | money }}</span>
</div>
      </div>
    </label>
  {% endfor %}
</div>

<style>
.custom-variant-selector{
  display:grid;
  grid-template-columns:repeat(2,minmax(0,1fr)); /* deux colonnes permanentes */
  gap:12px;
  margin-top:20px;
}
  .hidden-radio {
  display: none;
}


/* chaque carte occupe exactement sa colonne */
.custom-variant-selector__block{
  width:100%;                 /* ← la grille gère la largeur */
  box-sizing:border-box;
  border:2px solid #ccc;
  border-radius:10px;
  padding:10px;
  text-align:center;
  position:relative;
  cursor:pointer;
  transition:all .2s ease;
}
.variant-card {
  display: flex;
  flex-direction: column;
  justify-content: flex-end; /* aligne le contenu vers le bas */
  height: 150px; /* fixe une même hauteur pour toutes les cartes */
}

.variant-card img.img-small {
  height: 50px;
  object-fit: contain;
  align-self: center;
}

.variant-card img.img-large {
  height: 70px;
  object-fit: contain;
  align-self: center;
}

.custom-variant-selector__block.selected{
  border-color:#000;
  background:#f6f6f6;
}

/*  décorations inchangées  */
.variant-badge {
  position: absolute;
  top: 6px;
  left: 50%;
  transform: translateX(-50%);
  background: #1A1A1A;
  color: white;
  padding: 4px 10px;
  font-size: 12px;
  border-radius: 6px;
  white-space: nowrap;       /* empêche le retour à la ligne */
  overflow: hidden;          /* masque le débordement */
  text-overflow: ellipsis;   /* ajoute "..." si trop long */
  max-width: 90%;            /* limite la largeur */
  z-index: 2;
}
  .variant-price {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 6px;
  margin-top: 4px;
  font-size: 14px;
}

.old-price {
  text-decoration: line-through;
  color: #999;
  font-size: 14px;
}

.current-price {
  font-weight: bold;
  color: #000;
}


.variant-indicator{
  width:10px;height:10px;border-radius:50%;
  border:2px solid #000;position:absolute;top:10px;right:10px;
}
.custom-variant-selector__block.selected .variant-indicator{background:#000}

</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const root = document.getElementById("cvs-{{ section.id }}-{{ block.id }}") 
            || document.querySelector(".custom-variant-selector");
  if (!root) return;

  // -- Trouver le bon form du thème (ordre de priorité large pour Shrine/Dawn/Impact) --
  const form =
    // ID classique des thèmes récents
    document.getElementById("product-form-{{ section.id }}") ||
    // Web component <product-form> (Shopify)
    root.closest("product-form")?.querySelector('form[action*="/cart/add"]') ||
    // Dans la section courante
    root.closest("section")?.querySelector('form[action*="/cart/add"]') ||
    // Fallback global (dernier recours)
    document.querySelector('form[action*="/cart/add"]');
  if (!form) return;

  // Référence du bouton ATC (pour certains thèmes il n’a pas name="add")
  const addBtn =
    form.querySelector('button[name="add"]') ||
    form.querySelector('button[type="submit"]:not(.shopify-payment-button__button)');

  // --- Helpers DOM ---
  function clickIfDifferent(el){ if (el && !el.disabled) { el.click ? el.click() : el.dispatchEvent(new MouseEvent('click',{bubbles:true})); } }
  function setValue(el, val){
    if (!el || el.disabled) return;
    if (el.tagName === 'SELECT') {
      if (el.value !== val) {
        el.value = val;
        el.dispatchEvent(new Event('input',{bubbles:true}));
        el.dispatchEvent(new Event('change',{bubbles:true}));
      }
    } else if (el.tagName === 'INPUT') {
      if ((el.type === 'radio' || el.type === 'checkbox') && el.value === val && !el.checked) clickIfDifferent(el);
      else if (el.type !== 'radio' && el.type !== 'checkbox' && el.value !== val) {
        el.value = val;
        el.dispatchEvent(new Event('input',{bubbles:true}));
        el.dispatchEvent(new Event('change',{bubbles:true}));
      }
    } else if (el.tagName === 'BUTTON') {
      if ((el.dataset.value || el.getAttribute('data-option-value')) == val) clickIfDifferent(el);
    }
  }

  function applyOption(index, value){
    if (!value) return;
    const i = index + 1;

    // radios options[i]
    const radios = form.querySelectorAll(`input[type="radio"][name="options[${i}]"]`);
    if (radios.length) {
      const target = Array.from(radios).find(r => r.value === value && !r.disabled);
      if (target) { clickIfDifferent(target); return; }
    }
    // select options[i]
    const sel = form.querySelector(`select[name="options[${i}]"]`);
    if (sel) { setValue(sel, value); return; }

    // data-index / Dawn-like
    const groupRadios = form.querySelectorAll(`[data-index="option${i}"] input[type="radio"]`);
    if (groupRadios.length) {
      const t = Array.from(groupRadios).find(r => r.value === value && !r.disabled);
      if (t) { clickIfDifferent(t); return; }
    }
    const groupSelect = form.querySelector(`[data-index="option${i}"] select`);
    if (groupSelect) { setValue(groupSelect, value); return; }

    // swatch divers
    const swatchBtn = form.querySelector(
      `[data-option-position="${i}"][data-option-value="${CSS.escape(value)}"],` +
      `[data-option-index="${i}"][data-value="${CSS.escape(value)}"],` +
      `button[data-value="${CSS.escape(value)}"][data-position="${i}"],` +
      `.swatch [data-option-position="${i}"][data-value="${CSS.escape(value)}"]`
    );
    if (swatchBtn) { clickIfDifferent(swatchBtn); return; }
  }

  // --- Gestion propre de l'input name="id" ---
  function ensureSingleIdInput(variantId){
    // supprime nos anciens inputs marqués
    form.querySelectorAll('input[name="id"][data-cvs="1"]').forEach(n => n.remove());

    // récupère un input id natif s'il existe
    let idInput = form.querySelector('input[name="id"]');
    const idSelect = form.querySelector('select[name="id"]');

    if (idSelect) {
      if (String(idSelect.value) !== String(variantId)) {
        idSelect.value = variantId;
        idSelect.dispatchEvent(new Event('input',{bubbles:true}));
        idSelect.dispatchEvent(new Event('change',{bubbles:true}));
      }
      return; // priorité au select natif si présent
    }

    if (!idInput) {
      idInput = document.createElement('input');
      idInput.type = 'hidden';
      idInput.name = 'id';
      idInput.setAttribute('data-cvs','1'); // marqueur pour éviter les doublons
      form.appendChild(idInput);
    }
    if (String(idInput.value) !== String(variantId)) {
      idInput.value = variantId;
      form.dispatchEvent(new Event('input',{bubbles:true}));
      form.dispatchEvent(new Event('change',{bubbles:true}));
    }
  }

  function syncFromCard(card){
    const desired = [card.dataset.o1, card.dataset.o2, card.dataset.o3].filter(Boolean);
    desired.forEach((val, idx) => applyOption(idx, val));

    const variantId = card.dataset.variantId;
    if (variantId) ensureSingleIdInput(variantId);

    // Notifie les scripts du thème
    form.dispatchEvent(new Event('product:options:changed',{bubbles:true}));
    document.dispatchEvent(new Event('variant:changed',{bubbles:true}));
  }

  // --- Clicks sur les cartes ---
  const blocks = root.querySelectorAll('[data-variant-id], .custom-variant-selector__block');
  blocks.forEach((block) => {
    block.addEventListener('click', function(e){
      // état visuel
      blocks.forEach(b => b.classList && b.classList.remove('selected'));
      this.classList && this.classList.add('selected');
      const r = this.querySelector('input[type="radio"]'); if (r) r.checked = true;

      // synchro
      syncFromCard(this);
    });
  });

  // --- Init visuelle selon l'ID courant du form ---
  const idField = form.querySelector('select[name="id"], input[name="id"]');
  const currentId = (idField && idField.value) || "{{ product.selected_or_first_available_variant.id }}";
  const initial = Array.from(blocks).find(b => (b.getAttribute('data-variant-id')||'') === String(currentId));
  if (initial) {
    blocks.forEach(b => b.classList && b.classList.remove('selected'));
    initial.classList && initial.classList.add('selected');
    const ri = initial.querySelector('input[type="radio"]'); if (ri) ri.checked = true;
    ensureSingleIdInput(currentId);
  }

  // --- Ceinture et bretelles : juste avant la soumission, on garantit l'ID ---
  form.addEventListener('submit', function(e){
    const active = root.querySelector('.custom-variant-selector__block.selected') || blocks[0];
    const vid = active?.getAttribute('data-variant-id');
    if (vid) ensureSingleIdInput(vid);
    // Optionnel debug :
    // console.log('[CVS] submit with id=', form.querySelector('input[name="id"], select[name="id"]')?.value);
  }, true);
});
</script>

