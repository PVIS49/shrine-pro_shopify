<div id="cvs-{{ section.id }}-{{ block.id }}" class="custom-variant-selector">

  {% assign displayed_variants = product.variants | slice: 0, 3 %}

  {% for variant in displayed_variants %}
    <label class="custom-variant-selector__block{% if forloop.first %} selected{% endif %}"
       data-variant-id="{{ variant.id }}"
       data-o1="{{ variant.option1 | escape }}"
       data-o2="{{ variant.option2 | escape }}"
       data-o3="{{ variant.option3 | escape }}">

      <span class="variant-indicator"></span>
      <input type="radio" name="custom_variant_id" class="hidden-radio" value="{{ variant.id }}" {% if forloop.first %}checked{% endif %}>
      <div class="variant-card">
        {% if forloop.index == 2 %}
  <div class="variant-badge">Économisez 50€</div>
{% endif %}

    {% if variant.metafields.custom.custom_image %}
  <img
    src="{{ variant.metafields.custom.custom_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% elsif variant.featured_media %}
  <img
    src="{{ variant.featured_media.preview_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% endif %}


        <p class="variant-label">{{ variant.title }}</p>
<div class="variant-price">
  {% if variant.compare_at_price > variant.price %}
    <span class="old-price">{{ variant.compare_at_price | money }}</span>
  {% endif %}
  <span class="current-price">{{ variant.price | money }}</span>
</div>
      </div>
    </label>
  {% endfor %}
</div>

<style>
.custom-variant-selector{
  display:grid;
  grid-template-columns:repeat(2,minmax(0,1fr)); /* deux colonnes permanentes */
  gap:12px;
  margin-top:20px;
}
  .hidden-radio {
  display: none;
}


/* chaque carte occupe exactement sa colonne */
.custom-variant-selector__block{
  width:100%;                 /* ← la grille gère la largeur */
  box-sizing:border-box;
  border:2px solid #ccc;
  border-radius:10px;
  padding:10px;
  text-align:center;
  position:relative;
  cursor:pointer;
  transition:all .2s ease;
}
.variant-card {
  display: flex;
  flex-direction: column;
  justify-content: flex-end; /* aligne le contenu vers le bas */
  height: 150px; /* fixe une même hauteur pour toutes les cartes */
}

.variant-card img.img-small {
  height: 50px;
  object-fit: contain;
  align-self: center;
}

.variant-card img.img-large {
  height: 70px;
  object-fit: contain;
  align-self: center;
}

.custom-variant-selector__block.selected{
  border-color:#000;
  background:#f6f6f6;
}

/*  décorations inchangées  */
.variant-badge {
  position: absolute;
  top: 6px;
  left: 50%;
  transform: translateX(-50%);
  background: #1A1A1A;
  color: white;
  padding: 4px 10px;
  font-size: 12px;
  border-radius: 6px;
  white-space: nowrap;       /* empêche le retour à la ligne */
  overflow: hidden;          /* masque le débordement */
  text-overflow: ellipsis;   /* ajoute "..." si trop long */
  max-width: 90%;            /* limite la largeur */
  z-index: 2;
}
  .variant-price {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 6px;
  margin-top: 4px;
  font-size: 14px;
}

.old-price {
  text-decoration: line-through;
  color: #999;
  font-size: 14px;
}

.current-price {
  font-weight: bold;
  color: #000;
}


.variant-indicator{
  width:10px;height:10px;border-radius:50%;
  border:2px solid #000;position:absolute;top:10px;right:10px;
}
.custom-variant-selector__block.selected .variant-indicator{background:#000}

</style>

<script>
(function(){
  document.addEventListener('DOMContentLoaded', function(){
    const root = document.getElementById("cvs-{{ section.id }}-{{ block.id }}") 
              || document.querySelector(".custom-variant-selector");
    if (!root) return;

    // --- Données variants (depuis Liquid) ---
    const VARIANTS = {{ product.variants | json }};
    const OPT_COUNT = {{ product.options | size }};

    // --- Trouver le vrai form du bouton ATC ---
    const addBtn = root.closest('section')?.querySelector('button[name="add"], button[type="submit"]:not(.shopify-payment-button__button)')
                || document.querySelector('button[name="add"], button[type="submit"]:not(.shopify-payment-button__button)');
    if (!addBtn) return;
    const form = addBtn.closest('form');
    if (!form) return;

    // --- Helpers ---
    const blocks = Array.from(root.querySelectorAll('.custom-variant-selector__block'));
    function byId(id){ return VARIANTS.find(v => String(v.id) === String(id)); }
    function byOptions(o1,o2,o3){
      return VARIANTS.find(v => {
        const o = v.options;
        return (o[0] == o1) && (OPT_COUNT < 2 || o[1] == o2) && (OPT_COUNT < 3 || o[2] == o3);
      });
    }
    function setNativeOption(i, val){
      // radios
      const radios = form.querySelectorAll(`input[type="radio"][name="options[${i}]"]`);
      if (radios.length){
        const r = Array.from(radios).find(x => x.value === val && !x.disabled);
        if (r && !r.checked){ r.click(); return true; }
      }
      // select
      const sel = form.querySelector(`select[name="options[${i}]"]`);
      if (sel && sel.value !== val){
        sel.value = val;
        sel.dispatchEvent(new Event('input', {bubbles:true}));
        sel.dispatchEvent(new Event('change', {bubbles:true}));
        return true;
      }
      // Dawn-like
      const grpSel = form.querySelector(`[data-index="option${i}"] select`);
      if (grpSel && grpSel.value !== val){
        grpSel.value = val;
        grpSel.dispatchEvent(new Event('input', {bubbles:true}));
        grpSel.dispatchEvent(new Event('change', {bubbles:true}));
        return true;
      }
      const grpRad = form.querySelectorAll(`[data-index="option${i}"] input[type="radio"]`);
      if (grpRad.length){
        const r2 = Array.from(grpRad).find(x => x.value === val && !x.disabled);
        if (r2 && !r2.checked){ r2.click(); return true; }
      }
      return false;
    }
    function ensureIdField(variantId){
      const sel = form.querySelector('select[name="id"]');
      if (sel){
        if (String(sel.value) !== String(variantId)){
          sel.value = String(variantId);
          sel.dispatchEvent(new Event('input',{bubbles:true}));
          sel.dispatchEvent(new Event('change',{bubbles:true}));
        }
        return;
      }
      let hid = form.querySelector('input[name="id"][data-cvs="1"]') || form.querySelector('input[name="id"]');
      if (!hid){
        hid = document.createElement('input');
        hid.type = 'hidden'; hid.name = 'id'; hid.setAttribute('data-cvs','1');
        form.appendChild(hid);
      }
      if (String(hid.value) !== String(variantId)){
        hid.value = String(variantId);
        form.dispatchEvent(new Event('input',{bubbles:true}));
        form.dispatchEvent(new Event('change',{bubbles:true}));
      }
    }
    function setATCEnabled(enabled){
      if (!addBtn) return;
      addBtn.disabled = !enabled;
      addBtn.setAttribute('aria-disabled', String(!enabled));
    }

    // --- Sélection via carte (→ options natives + id) ---
    function selectCard(card){
      if (!card) return;
      blocks.forEach(b => b.classList.remove('selected'));
      card.classList.add('selected');

      const r = card.querySelector('input[type="radio"]'); if (r) r.checked = true;

      const o1 = card.dataset.o1 || null;
      const o2 = (OPT_COUNT >= 2) ? (card.dataset.o2 || null) : null;
      const o3 = (OPT_COUNT >= 3) ? (card.dataset.o3 || null) : null;

      // Pousse les options dans les widgets natifs
      if (o1) setNativeOption(1, o1);
      if (OPT_COUNT >= 2 && o2) setNativeOption(2, o2);
      if (OPT_COUNT >= 3 && o3) setNativeOption(3, o3);

      // Calcule la variante fiable depuis options (au cas où data-variant-id serait erroné)
      let v = byOptions(o1,o2,o3);
      if (!v && card.dataset.variantId) v = byId(card.dataset.variantId);

      if (v){
        ensureIdField(v.id);
        setATCEnabled(v.available);
        // Notify thème
        form.dispatchEvent(new Event('product:options:changed',{bubbles:true}));
        document.dispatchEvent(new CustomEvent('variant:changed',{detail:{variant:v},bubbles:true}));
      }
    }

    // --- Click sur cartes ---
    blocks.forEach(card=>{
      card.addEventListener('click', function(e){
        e.preventDefault();
        selectCard(this);
      });
    });

    // --- Miroir : changement des options natives → sélectionne la carte correspondante ---
    function reflectFromNative(){
      // Tente de lire les valeurs natives
      const getVal = (i)=>{
        const sel = form.querySelector(`select[name="options[${i}]"]`) 
                 || form.querySelector(`[data-index="option${i}"] select`);
        if (sel) return sel.value;
        const r = form.querySelector(`input[type="radio"][name="options[${i}]"]:checked`)
                 || form.querySelector(`[data-index="option${i}"] input[type="radio"]:checked`);
        return r ? r.value : null;
      };
      const o1 = getVal(1), o2 = OPT_COUNT>=2 ? getVal(2) : null, o3 = OPT_COUNT>=3 ? getVal(3) : null;
      const v = byOptions(o1,o2,o3);
      if (!v) return;

      // Sélection visuelle de la bonne carte
      const target = blocks.find(b=>{
        return (b.dataset.o1 === o1) &&
               (OPT_COUNT<2 || b.dataset.o2 === o2) &&
               (OPT_COUNT<3 || b.dataset.o3 === o3);
      }) || blocks.find(b => String(b.dataset.variantId) === String(v.id));

      if (target){
        blocks.forEach(b => b.classList.remove('selected'));
        target.classList.add('selected');
        const r = target.querySelector('input[type="radio"]'); if (r) r.checked = true;
      }
      ensureIdField(v.id);
      setATCEnabled(v.available);
    }

    // Écoutes sur les entrées natives
    form.addEventListener('change', function(e){
      if (e.target.matches('select[name^="options["], input[type="radio"][name^="options["]')) {
        reflectFromNative();
      }
    }, true);

    // --- Init avec l’ID courant (ou la 1ère carte) ---
    (function init(){
      const idField = form.querySelector('select[name="id"], input[name="id"]');
      const currentId = (idField && idField.value) || "{{ product.selected_or_first_available_variant.id }}";
      let initialCard = blocks.find(b => String(b.dataset.variantId) === String(currentId));
      if (!initialCard){
        // sinon, essaie par options du premier bloc
        initialCard = blocks[0] || null;
      }
      if (initialCard) selectCard(initialCard);
    })();

    // --- Sécurité : avant submit/click, injecte l’ID choisi ---
    function preflight(){
      const active = root.querySelector('.custom-variant-selector__block.selected') || blocks[0];
      if (!active) return;
      const o1 = active.dataset.o1, o2 = active.dataset.o2, o3 = active.dataset.o3;
      const v = byOptions(o1,o2,o3) || byId(active.dataset.variantId);
      if (v){
        ensureIdField(v.id);
        setATCEnabled(v.available);
      }
    }
    form.addEventListener('submit', preflight, true);
    addBtn.addEventListener('click', preflight, true);

    // --- Fallback AJAX si le thème bloque la soumission ---
    form.addEventListener('submit', function(){
      setTimeout(async ()=>{
        try{
          // Si un tiroir est ouvert, on considère que le thème a géré l’ajout.
          const drawerOpen = document.querySelector('[data-cart-drawer].is-open, .cart-drawer.is-open, .js-cartDrawer.is-open');
          if (drawerOpen) return;

          const fd = new FormData(form);
          let id = fd.get('id');
          if (!id){
            const active = root.querySelector('.custom-variant-selector__block.selected') || blocks[0];
            const v = active ? (byOptions(active.dataset.o1, active.dataset.o2, active.dataset.o3) || byId(active.dataset.variantId)) : null;
            if (!v) return;
            fd.set('id', v.id);
            id = v.id;
          }
          // Post AJAX
          const res = await fetch('/cart/add.js', { method:'POST', body:fd, headers:{'Accept':'application/json'} });
          if (!res.ok) return;

          // Ouvrir le tiroir si possible
          document.dispatchEvent(new CustomEvent('cart:refresh', {detail:{source:'cvs'}}));
          document.dispatchEvent(new CustomEvent('cart:open', {detail:{source:'cvs'}}));
          document.body.classList.add('cart-open');
          const opener = document.querySelector('[data-cart-drawer-open], [data-action="open-cart"], .js-openCartDrawer');
          if (opener) opener.click();
        }catch(e){}
      },0);
    }, {once:true});
  });
})();
</script>



