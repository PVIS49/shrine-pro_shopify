<div id="cvs-{{ section.id }}-{{ block.id }}" class="custom-variant-selector">

  {% assign displayed_variants = product.variants | slice: 0, 3 %}

  {% for variant in displayed_variants %}
    <label class="custom-variant-selector__block{% if forloop.first %} selected{% endif %}"
       data-variant-id="{{ variant.id }}"
       data-o1="{{ variant.option1 | escape }}"
       data-o2="{{ variant.option2 | escape }}"
       data-o3="{{ variant.option3 | escape }}">

      <span class="variant-indicator"></span>
      <input type="radio" name="custom_variant_id" class="hidden-radio" value="{{ variant.id }}" {% if forloop.first %}checked{% endif %}>
      <div class="variant-card">
        {% if forloop.index == 2 %}
  <div class="variant-badge">Économisez 50€</div>
{% endif %}

    {% if variant.metafields.custom.custom_image %}
  <img
    src="{{ variant.metafields.custom.custom_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% elsif variant.featured_media %}
  <img
    src="{{ variant.featured_media.preview_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% endif %}


        <p class="variant-label">{{ variant.title }}</p>
<div class="variant-price">
  {% if variant.compare_at_price > variant.price %}
    <span class="old-price">{{ variant.compare_at_price | money }}</span>
  {% endif %}
  <span class="current-price">{{ variant.price | money }}</span>
</div>
      </div>
    </label>
  {% endfor %}
</div>

<style>
.custom-variant-selector{
  display:grid;
  grid-template-columns:repeat(2,minmax(0,1fr)); /* deux colonnes permanentes */
  gap:12px;
  margin-top:20px;
}
  .hidden-radio {
  display: none;
}


/* chaque carte occupe exactement sa colonne */
.custom-variant-selector__block{
  width:100%;                 /* ← la grille gère la largeur */
  box-sizing:border-box;
  border:2px solid #ccc;
  border-radius:10px;
  padding:10px;
  text-align:center;
  position:relative;
  cursor:pointer;
  transition:all .2s ease;
}
.variant-card {
  display: flex;
  flex-direction: column;
  justify-content: flex-end; /* aligne le contenu vers le bas */
  height: 150px; /* fixe une même hauteur pour toutes les cartes */
}

.variant-card img.img-small {
  height: 50px;
  object-fit: contain;
  align-self: center;
}

.variant-card img.img-large {
  height: 70px;
  object-fit: contain;
  align-self: center;
}

.custom-variant-selector__block.selected{
  border-color:#000;
  background:#f6f6f6;
}

/*  décorations inchangées  */
.variant-badge {
  position: absolute;
  top: 6px;
  left: 50%;
  transform: translateX(-50%);
  background: #1A1A1A;
  color: white;
  padding: 4px 10px;
  font-size: 12px;
  border-radius: 6px;
  white-space: nowrap;       /* empêche le retour à la ligne */
  overflow: hidden;          /* masque le débordement */
  text-overflow: ellipsis;   /* ajoute "..." si trop long */
  max-width: 90%;            /* limite la largeur */
  z-index: 2;
}
  .variant-price {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 6px;
  margin-top: 4px;
  font-size: 14px;
}

.old-price {
  text-decoration: line-through;
  color: #999;
  font-size: 14px;
}

.current-price {
  font-weight: bold;
  color: #000;
}


.variant-indicator{
  width:10px;height:10px;border-radius:50%;
  border:2px solid #000;position:absolute;top:10px;right:10px;
}
.custom-variant-selector__block.selected .variant-indicator{background:#000}

</style>

<script>
document.addEventListener('DOMContentLoaded', function(){
  // 1) Récupère le product-form principal géré par le thème
  const productFormEl = document.querySelector('product-form[data-main="true"]');
  if (!productFormEl) return;

  const form = productFormEl.querySelector('form[action*="/cart/add"]');
  if (!form) return;

  // 2) Ton sélecteur custom
  const root = document.getElementById("cvs-{{ section.id }}-{{ block.id }}") 
            || document.querySelector(".custom-variant-selector");
  if (!root) return;

  const VARIANTS = {{ product.variants | json }};
  const OPTS_CNT = {{ product.options | size }};
  const cards = Array.from(root.querySelectorAll('.custom-variant-selector__block'));
  if (!cards.length) return;

  // Helpers
  const byId   = id => VARIANTS.find(v => String(v.id) === String(id));
  const byOpts = (o1,o2,o3) => VARIANTS.find(v => {
    const o=v.options; return (o[0]==o1) && (OPTS_CNT<2||o[1]==o2) && (OPTS_CNT<3||o[2]==o3);
  });

  function ensureId(variantId){
    // Priorité: <select name="id">
    const sel = form.querySelector('select[name="id"]');
    if (sel){
      if (String(sel.value)!==String(variantId)){
        sel.value = String(variantId);
        sel.dispatchEvent(new Event('input',{bubbles:true}));
        sel.dispatchEvent(new Event('change',{bubbles:true}));
      }
      return;
    }
    // Sinon: <input type="hidden" name="id">
    let hid = form.querySelector('input[name="id"]');
    if (!hid){
      hid = document.createElement('input');
      hid.type = 'hidden';
      hid.name = 'id';
      form.appendChild(hid);
    }
    if (String(hid.value)!==String(variantId)){
      hid.value = String(variantId);
      form.dispatchEvent(new Event('input',{bubbles:true}));
      form.dispatchEvent(new Event('change',{bubbles:true}));
    }
  }

  function setNativeOption(i, val){
    // radios: options[i]
    const radios = form.querySelectorAll(`input[type="radio"][name="options[${i}]"]`);
    if (radios.length){
      const r = Array.from(radios).find(x => x.value === val && !x.disabled);
      if (r && !r.checked){ r.click(); return; }
    }
    // select: options[i]
    const sel = form.querySelector(`select[name="options[${i}]"]`);
    if (sel && sel.value !== val){
      sel.value = val;
      sel.dispatchEvent(new Event('input',{bubbles:true}));
      sel.dispatchEvent(new Event('change',{bubbles:true}));
      return;
    }
    // schéma Dawn-like
    const gsel = form.querySelector(`[data-index="option${i}"] select`);
    if (gsel && gsel.value !== val){
      gsel.value = val;
      gsel.dispatchEvent(new Event('input',{bubbles:true}));
      gsel.dispatchEvent(new Event('change',{bubbles:true}));
      return;
    }
    const grad = form.querySelectorAll(`[data-index="option${i}"] input[type="radio"]`);
    if (grad.length){
      const r2 = Array.from(grad).find(x => x.value === val && !x.disabled);
      if (r2 && !r2.checked){ r2.click(); return; }
    }
  }

  function selectCard(card){
    if (!card) return;
    // état visuel de tes cartes
    cards.forEach(b => b.classList.remove('selected'));
    card.classList.add('selected');
    const r = card.querySelector('input[type="radio"]'); if (r) r.checked = true;

    // pousse les options dans le form natif
    const o1 = card.dataset.o1 || null;
    const o2 = OPTS_CNT>=2 ? (card.dataset.o2||null) : null;
    const o3 = OPTS_CNT>=3 ? (card.dataset.o3||null) : null;
    if (o1) setNativeOption(1,o1);
    if (OPTS_CNT>=2 && o2) setNativeOption(2,o2);
    if (OPTS_CNT>=3 && o3) setNativeOption(3,o3);

    // calcule la variante et met à jour name="id" dans CE form
    const v = byOpts(o1,o2,o3) || (card.dataset.variantId ? byId(card.dataset.variantId) : null);
    if (v){
      ensureId(v.id);
      // signaux que le thème peut écouter
      form.dispatchEvent(new Event('product:options:changed',{bubbles:true}));
      document.dispatchEvent(new CustomEvent('variant:changed',{detail:{variant:v},bubbles:true}));
    }
  }

  // Clic sur tes cartes
  cards.forEach(card => card.addEventListener('click', () => selectCard(card)));

  // Init alignée sur l’ID courant du form (ou première carte)
  (function init(){
    const idField = form.querySelector('select[name="id"], input[name="id"]');
    const currentId = (idField && idField.value) || "{{ product.selected_or_first_available_variant.id }}";
    const initial = cards.find(b => String(b.dataset.variantId)===String(currentId)) || cards[0] || null;
    if (initial) selectCard(initial);
  })();

  // Miroir: si l’utilisateur change les options NATIVE du thème, on reflète sur tes cartes
  form.addEventListener('change', function(e){
    if (!e.target.matches('select[name^="options["], input[type="radio"][name^="options["]')) return;
    const getVal = (i)=>{
      const s = form.querySelector(`select[name="options[${i}]"]`) || form.querySelector(`[data-index="option${i}"] select`);
      if (s) return s.value;
      const rr = form.querySelector(`input[type="radio"][name="options[${i}]"]:checked`) || form.querySelector(`[data-index="option${i}"] input[type="radio"]:checked`);
      return rr ? rr.value : null;
    };
    const o1=getVal(1), o2=OPTS_CNT>=2?getVal(2):null, o3=OPTS_CNT>=3?getVal(3):null;
    const v = byOpts(o1,o2,o3);
    // sélection visuelle de la carte correspondante
    const target = cards.find(b => (b.dataset.o1===o1) && (OPTS_CNT<2 || b.dataset.o2===o2) && (OPTS_CNT<3 || b.dataset.o3===o3))
               || (v ? cards.find(b => String(b.dataset.variantId)===String(v.id)) : null);
    if (target){
      cards.forEach(b => b.classList.remove('selected'));
      target.classList.add('selected');
      const r = target.querySelector('input[type="radio"]'); if (r) r.checked = true;
    }
  }, true);
});
</script>
