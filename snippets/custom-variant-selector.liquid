<div id="cvs-{{ section.id }}-{{ block.id }}" class="custom-variant-selector">

  {% assign displayed_variants = product.variants | slice: 0, 3 %}

  {% for variant in displayed_variants %}
    <label class="custom-variant-selector__block{% if forloop.first %} selected{% endif %}"
       data-variant-id="{{ variant.id }}"
       data-o1="{{ variant.option1 | escape }}"
       data-o2="{{ variant.option2 | escape }}"
       data-o3="{{ variant.option3 | escape }}">

      <span class="variant-indicator"></span>
      <input type="radio" name="custom_variant_id" class="hidden-radio" value="{{ variant.id }}" {% if forloop.first %}checked{% endif %}>
      <div class="variant-card">
        {% if forloop.index == 2 %}
  <div class="variant-badge">Économisez 50€</div>
{% endif %}

    {% if variant.metafields.custom.custom_image %}
  <img
    src="{{ variant.metafields.custom.custom_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% elsif variant.featured_media %}
  <img
    src="{{ variant.featured_media.preview_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% endif %}


        <p class="variant-label">{{ variant.title }}</p>
<div class="variant-price">
  {% if variant.compare_at_price > variant.price %}
    <span class="old-price">{{ variant.compare_at_price | money }}</span>
  {% endif %}
  <span class="current-price">{{ variant.price | money }}</span>
</div>
      </div>
    </label>
  {% endfor %}
</div>

<style>
.custom-variant-selector{
  display:grid;
  grid-template-columns:repeat(2,minmax(0,1fr)); /* deux colonnes permanentes */
  gap:12px;
  margin-top:20px;
}
  .hidden-radio {
  display: none;
}


/* chaque carte occupe exactement sa colonne */
.custom-variant-selector__block{
  width:100%;                 /* ← la grille gère la largeur */
  box-sizing:border-box;
  border:2px solid #ccc;
  border-radius:10px;
  padding:10px;
  text-align:center;
  position:relative;
  cursor:pointer;
  transition:all .2s ease;
}
.variant-card {
  display: flex;
  flex-direction: column;
  justify-content: flex-end; /* aligne le contenu vers le bas */
  height: 150px; /* fixe une même hauteur pour toutes les cartes */
}

.variant-card img.img-small {
  height: 50px;
  object-fit: contain;
  align-self: center;
}

.variant-card img.img-large {
  height: 70px;
  object-fit: contain;
  align-self: center;
}

.custom-variant-selector__block.selected{
  border-color:#000;
  background:#f6f6f6;
}

/*  décorations inchangées  */
.variant-badge {
  position: absolute;
  top: 6px;
  left: 50%;
  transform: translateX(-50%);
  background: #1A1A1A;
  color: white;
  padding: 4px 10px;
  font-size: 12px;
  border-radius: 6px;
  white-space: nowrap;       /* empêche le retour à la ligne */
  overflow: hidden;          /* masque le débordement */
  text-overflow: ellipsis;   /* ajoute "..." si trop long */
  max-width: 90%;            /* limite la largeur */
  z-index: 2;
}
  .variant-price {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 6px;
  margin-top: 4px;
  font-size: 14px;
}

.old-price {
  text-decoration: line-through;
  color: #999;
  font-size: 14px;
}

.current-price {
  font-weight: bold;
  color: #000;
}


.variant-indicator{
  width:10px;height:10px;border-radius:50%;
  border:2px solid #000;position:absolute;top:10px;right:10px;
}
.custom-variant-selector__block.selected .variant-indicator{background:#000}

</style>

<script>
(function(){
  document.addEventListener('DOMContentLoaded', function(){
    const root = document.getElementById("cvs-{{ section.id }}-{{ block.id }}") 
              || document.querySelector(".custom-variant-selector");
    if (!root) return;

    const VARIANTS   = {{ product.variants | json }};
    const OPT_COUNT  = {{ product.options | size }};
    const contextEl  = root.closest('section') || document;

    const addBtn = contextEl.querySelector('button[name="add"], button[type="submit"]:not(.shopify-payment-button__button)');
    const form   = addBtn ? (addBtn.closest('form') || contextEl.querySelector('form[action*="/cart/add"]')) : null;
    if (!addBtn) return;

    const cards = Array.from(root.querySelectorAll('.custom-variant-selector__block'));

    function byOptions(o1,o2,o3){
      return VARIANTS.find(v=>{
        const o=v.options;
        return (o[0]==o1) && (OPT_COUNT<2 || o[1]==o2) && (OPT_COUNT<3 || o[2]==o3);
      });
    }
    function byId(id){ return VARIANTS.find(v=>String(v.id)===String(id)); }

    function getSelectedCard(){
      return root.querySelector('.custom-variant-selector__block.selected') || cards[0] || null;
    }
    function getSelectedVariant(){
      const c = getSelectedCard(); if (!c) return null;
      return byOptions(c.dataset.o1, c.dataset.o2, c.dataset.o3) || (c.dataset.variantId ? byId(c.dataset.variantId) : null);
    }
    function getQty(){
      const q = form && (form.querySelector('input[name="quantity"]') || form.querySelector('input#Quantity'));
      const n = q ? parseInt(q.value,10) : 1;
      return (isNaN(n) || n<=0) ? 1 : n;
    }

    // ---- Section Rendering API helpers ----
    function findCartSectionIds(){
      const ids = [];
      // Drawer section (cherche un conteneur de section avec un type cart/minicart)
      const drawer = document.querySelector(
        '.cart-drawer[data-section-id], [data-section-type*="cart"][data-section-id], ' +
        '[id*="CartDrawer"][data-section-id], [data-cart-drawer][data-section-id]'
      );
      if (drawer?.dataset.sectionId) ids.push(drawer.dataset.sectionId);

      // Bulle compteur dans le header (met à jour l’icône)
      const bubble = document.querySelector('.cart-count-bubble, [data-cart-count-bubble]');
      const bubbleSection = bubble ? bubble.closest('[data-section-id]') : null;
      if (bubbleSection?.dataset.sectionId && !ids.includes(bubbleSection.dataset.sectionId)) {
        ids.push(bubbleSection.dataset.sectionId);
      }
      return ids;
    }

    async function renderSections(sectionIds){
      if (!sectionIds.length) return false;
      const url = `${window.location.pathname}?sections=${encodeURIComponent(sectionIds.join(','))}`;
      const res = await fetch(url, { headers: { 'Accept': 'application/json' }});
      if (!res.ok) return false;
      const json = await res.json();

      sectionIds.forEach(id=>{
        const html = json[id];
        if (!html) return;
        const current = document.querySelector(`[data-section-id="${id}"]`);
        if (!current) return;
        const tmp = document.createElement('div');
        tmp.innerHTML = html;
        const replacement = tmp.querySelector(`[data-section-id="${id}"]`) || tmp.firstElementChild;
        if (replacement) current.replaceWith(replacement);
      });
      return true;
    }

    async function refreshCartUI(){
      // 1) Tentative “propre” : rerender des sections
      const ids = findCartSectionIds();
      const ok  = await renderSections(ids);

      // 2) À défaut, MAJ du compteur via /cart.js
      try{
        const cartRes = await fetch('/cart.js', { headers:{'Accept':'application/json'} });
        if (cartRes.ok){
          const cart = await cartRes.json();
          const cnt  = (cart && Array.isArray(cart.items)) ? cart.items.reduce((s,i)=>s+i.quantity,0) : 0;
          const bubble = document.querySelector('.cart-count-bubble, [data-cart-count-bubble]');
          if (bubble){
            const span = bubble.querySelector('span') || bubble;
            span.textContent = String(cnt);
            bubble.classList.toggle('hidden', cnt<=0);
          }
        }
      }catch(e){}

      // 3) Signal aux scripts du thème
      document.dispatchEvent(new CustomEvent('cart:refresh', {detail:{source:'cvs'}}));
      document.dispatchEvent(new CustomEvent('cart:updated', {detail:{source:'cvs'}}));
      return ok;
    }

    function openDrawer(){
      document.dispatchEvent(new CustomEvent('cart:open',{detail:{source:'cvs'}}));
      document.body.classList.add('cart-open','drawer--cart-open');
      const opener = document.querySelector('[data-cart-drawer-open], [data-action="open-cart"], .js-openCartDrawer, .header__icon--cart, .cart-toggle, .open-cart, #CartDrawer-Open');
      if (opener) opener.click();
    }

    function setBtnBusy(on){
      addBtn.classList.toggle('is-loading', !!on);
      addBtn.disabled = !!on;
      addBtn.setAttribute('aria-disabled', String(!!on));
    }
    function toast(msg){
      try{
        addBtn.dataset.cvsMsg = msg;
        addBtn.classList.add('cvs-bubble');
        setTimeout(()=>addBtn.classList.remove('cvs-bubble'),1800);
      }catch(e){}
    }

    // Sélection visuelle
    cards.forEach(card=>{
      card.addEventListener('click', function(e){
        cards.forEach(b=>b.classList.remove('selected'));
        this.classList.add('selected');
        const r=this.querySelector('input[type="radio"]'); if (r) r.checked = true;
      });
    });

    // Init visuelle
    (function init(){
      const idField = form ? (form.querySelector('select[name="id"], input[name="id"]')) : null;
      const currentId = (idField && idField.value) || "{{ product.selected_or_first_available_variant.id }}";
      const initial = cards.find(b => String(b.dataset.variantId)===String(currentId)) || cards[0];
      if (initial){
        cards.forEach(b=>b.classList.remove('selected'));
        initial.classList.add('selected');
        const r=initial.querySelector('input[type="radio"]'); if (r) r.checked = true;
      }
    })();

    // ATC: on gère tout en AJAX + refresh sections + ouverture tiroir
    let inflight = false;
    addBtn.addEventListener('click', async function(ev){
      ev.preventDefault();
      if (inflight) return;

      const variant = getSelectedVariant();
      if (!variant){ toast('Variante introuvable'); return; }
      if (!variant.available){ toast('Variante indisponible'); return; }

      const qty = getQty();

      const fd = new FormData();
      fd.set('id', variant.id);
      fd.set('quantity', qty);

      inflight = true;
      setBtnBusy(true);
      try{
        const res = await fetch('/cart/add.js', { method:'POST', body:fd, headers:{'Accept':'application/json'} });
        if (!res.ok){
          toast('Erreur ajout panier');
          return;
        }
        // Re-render UI du panier AVANT d’ouvrir
        await refreshCartUI();
        openDrawer();
      }catch(err){
        toast('Erreur réseau');
      }finally{
        setBtnBusy(false);
        inflight = false;
      }
    });

    // Styles de feedback
    const style = document.createElement('style');
    style.textContent = `
      .is-loading{opacity:.7; pointer-events:none; position:relative;}
      .cvs-bubble::after{
        content: attr(data-cvs-msg);
        position:absolute; left:50%; transform:translateX(-50%);
        bottom:115%; background:#111; color:#fff; font-size:12px; padding:6px 8px;
        border-radius:6px; white-space:nowrap; z-index:9999;
      }`;
    document.head.appendChild(style);
  });
})();
</script>




