<div id="cvs-{{ section.id }}-{{ block.id }}" class="custom-variant-selector">

  {% assign displayed_variants = product.variants | slice: 0, 3 %}

  {% for variant in displayed_variants %}
    <label class="custom-variant-selector__block{% if forloop.first %} selected{% endif %}"
       data-variant-id="{{ variant.id }}"
       data-o1="{{ variant.option1 | escape }}"
       data-o2="{{ variant.option2 | escape }}"
       data-o3="{{ variant.option3 | escape }}">

      <span class="variant-indicator"></span>
      <input type="radio" name="custom_variant_id" class="hidden-radio" value="{{ variant.id }}" {% if forloop.first %}checked{% endif %}>
      <div class="variant-card">
        {% if forloop.index == 2 %}
  <div class="variant-badge">Économisez 50€</div>
{% endif %}

    {% if variant.metafields.custom.custom_image %}
  <img
    src="{{ variant.metafields.custom.custom_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% elsif variant.featured_media %}
  <img
    src="{{ variant.featured_media.preview_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% endif %}


        <p class="variant-label">{{ variant.title }}</p>
<div class="variant-price">
  {% if variant.compare_at_price > variant.price %}
    <span class="old-price">{{ variant.compare_at_price | money }}</span>
  {% endif %}
  <span class="current-price">{{ variant.price | money }}</span>
</div>
      </div>
    </label>
  {% endfor %}
</div>

<style>
.custom-variant-selector{
  display:grid;
  grid-template-columns:repeat(2,minmax(0,1fr)); /* deux colonnes permanentes */
  gap:12px;
  margin-top:20px;
}
  .hidden-radio {
  display: none;
}


/* chaque carte occupe exactement sa colonne */
.custom-variant-selector__block{
  width:100%;                 /* ← la grille gère la largeur */
  box-sizing:border-box;
  border:2px solid #ccc;
  border-radius:10px;
  padding:10px;
  text-align:center;
  position:relative;
  cursor:pointer;
  transition:all .2s ease;
}
.variant-card {
  display: flex;
  flex-direction: column;
  justify-content: flex-end; /* aligne le contenu vers le bas */
  height: 150px; /* fixe une même hauteur pour toutes les cartes */
}

.variant-card img.img-small {
  height: 50px;
  object-fit: contain;
  align-self: center;
}

.variant-card img.img-large {
  height: 70px;
  object-fit: contain;
  align-self: center;
}

.custom-variant-selector__block.selected{
  border-color:#000;
  background:#f6f6f6;
}

/*  décorations inchangées  */
.variant-badge {
  position: absolute;
  top: 6px;
  left: 50%;
  transform: translateX(-50%);
  background: #1A1A1A;
  color: white;
  padding: 4px 10px;
  font-size: 12px;
  border-radius: 6px;
  white-space: nowrap;       /* empêche le retour à la ligne */
  overflow: hidden;          /* masque le débordement */
  text-overflow: ellipsis;   /* ajoute "..." si trop long */
  max-width: 90%;            /* limite la largeur */
  z-index: 2;
}
  .variant-price {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 6px;
  margin-top: 4px;
  font-size: 14px;
}

.old-price {
  text-decoration: line-through;
  color: #999;
  font-size: 14px;
}

.current-price {
  font-weight: bold;
  color: #000;
}


.variant-indicator{
  width:10px;height:10px;border-radius:50%;
  border:2px solid #000;position:absolute;top:10px;right:10px;
}
.custom-variant-selector__block.selected .variant-indicator{background:#000}

</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const root = document.getElementById("cvs-{{ section.id }}-{{ block.id }}") 
              || document.querySelector(".custom-variant-selector");
    if (!root) return;

    // Formulaire produit (section courante)
    const form =
      document.getElementById("product-form-{{ section.id }}") ||
      root.closest("section")?.querySelector('form[action*="/cart/add"]');
    if (!form) return;

    // Champs utilisés par le thème
    const variantSelect = form.querySelector('select[name="id"]');
    const variantInput  = form.querySelector('input[name="id"]');
    const qtyInput      = form.querySelector('input[name="quantity"]');

    // Boutons
    const addBtn = form.querySelector('button[name="add"], button[type="submit"]:not(.shopify-payment-button__button)');
    const buyNowBtn = form.querySelector('.shopify-payment-button__button, .shopify-payment-button__button--unbranded');

    let selectedVariantId =
      (variantSelect && variantSelect.value) ||
      (variantInput && variantInput.value) ||
      "{{ product.selected_or_first_available_variant.id }}";

    // --- Sélection par cartes
    const blocks = root.querySelectorAll(".custom-variant-selector__block");
    blocks.forEach((block) => {
      block.addEventListener("click", function () {
        const variantId = this.getAttribute("data-variant-id");
        if (!variantId) return;

        // UI locale
        blocks.forEach((b) => b.classList.remove("selected"));
        this.classList.add("selected");
        const radio = this.querySelector('input[type="radio"]');
        if (radio) radio.checked = true;

        // Sync champ id natif si présent
        selectedVariantId = String(variantId);
        if (variantSelect && String(variantSelect.value) !== selectedVariantId) {
          variantSelect.value = selectedVariantId;
          variantSelect.dispatchEvent(new Event("change", { bubbles: true }));
          variantSelect.dispatchEvent(new Event("input",  { bubbles: true }));
        } else if (!variantSelect && variantInput) {
          variantInput.value = selectedVariantId;
          form.dispatchEvent(new Event("change", { bubbles: true }));
          form.dispatchEvent(new Event("input",  { bubbles: true }));
        }
      });
    });

    // Init visuel
    (function initUI(){
      const initialCard = root.querySelector('[data-variant-id="'+ String(selectedVariantId) +'"]');
      if (initialCard) {
        blocks.forEach((b) => b.classList.remove("selected"));
        initialCard.classList.add("selected");
        const r = initialCard.querySelector('input[type="radio"]');
        if (r) r.checked = true;
      }
    })();

    // --- Fallback robuste : forcer /cart/add.js pour le bouton "Ajouter au panier"
    if (addBtn) {
    addBtn.addEventListener('click', function (e) {
      e.preventDefault();

      // 1) S’assurer que name="id" porte bien la variante choisie
      const vid =
        (variantSelect && variantSelect.value) ||
        (variantInput && variantInput.value) ||
        selectedVariantId;

      if (!vid) { console.warn('[cvs] Aucun variantId'); return; }

      // si select existe, on le force pour que le form soit cohérent
      if (variantSelect && String(variantSelect.value) !== String(vid)) {
        variantSelect.value = String(vid);
        variantSelect.dispatchEvent(new Event('change', { bubbles: true }));
        variantSelect.dispatchEvent(new Event('input',  { bubbles: true }));
      } else if (!variantSelect) {
        // s'il n'y a pas de select, on s'assure d'avoir un input hidden name="id"
        let idField = variantInput || form.querySelector('input[name="id"]');
        if (!idField) {
          idField = document.createElement('input');
          idField.type = 'hidden';
          idField.name = 'id';
          form.appendChild(idField);
        }
        idField.value = String(vid);
      }

      // 2) Soumission AJAX du formulaire produit (embarque selling_plan, properties, qty, etc.)
      const fd = new FormData(form);
      // (certains thèmes utilisent un bouton qty séparé)
      if (!fd.get('quantity')) {
        const qty = form.querySelector('input[name="quantity"]');
        if (qty) fd.set('quantity', qty.value || '1');
      }

      addBtn.disabled = true;
      addBtn.setAttribute('aria-busy', 'true');

      fetch((form.action || '/cart/add') + '.js', {
        method: 'POST',
        headers: { 'Accept': 'application/json' },
        body: fd
      })
      .then(async (r) => {
        if (!r.ok) {
          const err = await r.json().catch(() => ({}));
          throw new Error(err.description || ('Add to cart failed (' + r.status + ')'));
        }
        return r.json();
      })
      .then((data) => {
        // Ouvre/rafraîchit le tiroir
        document.dispatchEvent(new CustomEvent('cart:refresh', { detail: data }));
        const drawerToggle = document.querySelector('[data-cart-drawer-toggle], [data-open-cart], .header__icon--cart');
        if (drawerToggle) drawerToggle.click();
        // Sinon, redirigez vers /cart si vous préférez :
        // window.location.href = '/cart';
      })
      .catch((err) => {
        console.error('[cvs] add via form failed:', err);
        // Fallback ultime : soumettre le form normalement
        form.submit();
      })
      .finally(() => {
        addBtn.disabled = false;
        addBtn.removeAttribute('aria-busy');
      });
    }, { capture: true }); // capture pour passer avant les handlers du thème
  }
</script>
