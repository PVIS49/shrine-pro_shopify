<div id="cvs-{{ section.id }}-{{ block.id }}" class="custom-variant-selector">

  {% assign displayed_variants = product.variants | slice: 0, 3 %}

  {% for variant in displayed_variants %}
    <label class="custom-variant-selector__block{% if forloop.first %} selected{% endif %}"
       data-variant-id="{{ variant.id }}"
       data-o1="{{ variant.option1 | escape }}"
       data-o2="{{ variant.option2 | escape }}"
       data-o3="{{ variant.option3 | escape }}">

      <span class="variant-indicator"></span>
      <input type="radio" name="custom_variant_id" class="hidden-radio" value="{{ variant.id }}" {% if forloop.first %}checked{% endif %}>
      <div class="variant-card">
        {% if forloop.index == 2 %}
  <div class="variant-badge">Économisez 50€</div>
{% endif %}

    {% if variant.metafields.custom.custom_image %}
  <img
    src="{{ variant.metafields.custom.custom_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% elsif variant.featured_media %}
  <img
    src="{{ variant.featured_media.preview_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% endif %}


        <p class="variant-label">{{ variant.title }}</p>
<div class="variant-price">
  {% if variant.compare_at_price > variant.price %}
    <span class="old-price">{{ variant.compare_at_price | money }}</span>
  {% endif %}
  <span class="current-price">{{ variant.price | money }}</span>
</div>
      </div>
    </label>
  {% endfor %}
</div>

<style>
.custom-variant-selector{
  display:grid;
  grid-template-columns:repeat(2,minmax(0,1fr)); /* deux colonnes permanentes */
  gap:12px;
  margin-top:20px;
}
  .hidden-radio {
  display: none;
}


/* chaque carte occupe exactement sa colonne */
.custom-variant-selector__block{
  width:100%;                 /* ← la grille gère la largeur */
  box-sizing:border-box;
  border:2px solid #ccc;
  border-radius:10px;
  padding:10px;
  text-align:center;
  position:relative;
  cursor:pointer;
  transition:all .2s ease;
}
.variant-card {
  display: flex;
  flex-direction: column;
  justify-content: flex-end; /* aligne le contenu vers le bas */
  height: 150px; /* fixe une même hauteur pour toutes les cartes */
}

.variant-card img.img-small {
  height: 50px;
  object-fit: contain;
  align-self: center;
}

.variant-card img.img-large {
  height: 70px;
  object-fit: contain;
  align-self: center;
}

.custom-variant-selector__block.selected{
  border-color:#000;
  background:#f6f6f6;
}

/*  décorations inchangées  */
.variant-badge {
  position: absolute;
  top: 6px;
  left: 50%;
  transform: translateX(-50%);
  background: #1A1A1A;
  color: white;
  padding: 4px 10px;
  font-size: 12px;
  border-radius: 6px;
  white-space: nowrap;       /* empêche le retour à la ligne */
  overflow: hidden;          /* masque le débordement */
  text-overflow: ellipsis;   /* ajoute "..." si trop long */
  max-width: 90%;            /* limite la largeur */
  z-index: 2;
}
  .variant-price {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 6px;
  margin-top: 4px;
  font-size: 14px;
}

.old-price {
  text-decoration: line-through;
  color: #999;
  font-size: 14px;
}

.current-price {
  font-weight: bold;
  color: #000;
}


.variant-indicator{
  width:10px;height:10px;border-radius:50%;
  border:2px solid #000;position:absolute;top:10px;right:10px;
}
.custom-variant-selector__block.selected .variant-indicator{background:#000}

</style>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const root = document.getElementById("cvs-{{ section.id }}-{{ block.id }}") 
            || document.querySelector(".custom-variant-selector");
  if (!root) return;

  // 1) Trouve le VRAI bouton ATC et son form (on part du bouton)
  const addBtn = root.closest('section')?.querySelector('button[name="add"], button[type="submit"]:not(.shopify-payment-button__button)') 
              || document.querySelector('button[name="add"], button[type="submit"]:not(.shopify-payment-button__button)');
  if (!addBtn) return;

  const form = addBtn.closest('form');
  if (!form) return;

  // 2) Helper : garantit un unique champ name="id" dans CE form
  function ensureIdInForm(variantId) {
    if (!variantId) return;
    // Si le form a un <select name="id"> natif, on le pilote en priorité
    const sel = form.querySelector('select[name="id"]');
    if (sel) {
      if (String(sel.value) !== String(variantId)) {
        sel.value = String(variantId);
        sel.dispatchEvent(new Event('input', {bubbles: true}));
        sel.dispatchEvent(new Event('change', {bubbles: true}));
      }
      return;
    }
    // Sinon on gère un input hidden unique
    let hid = form.querySelector('input[name="id"][data-cvs="1"]') || form.querySelector('input[name="id"]');
    if (!hid) {
      hid = document.createElement('input');
      hid.type = 'hidden';
      hid.name = 'id';
      hid.setAttribute('data-cvs','1');
      form.appendChild(hid);
    }
    if (String(hid.value) !== String(variantId)) {
      hid.value = String(variantId);
      form.dispatchEvent(new Event('input', {bubbles: true}));
      form.dispatchEvent(new Event('change', {bubbles: true}));
    }
  }

  // 3) Récupère l’ID de la variante actuellement sélectionnée dans tes cartes
  function getSelectedVariantId() {
    const active = root.querySelector('.custom-variant-selector__block.selected') 
                || root.querySelector('[data-variant-id]');
    return active ? active.getAttribute('data-variant-id') : null;
  }

  // 4) Sécurise avant SUBMIT (capture) ET avant CLICK sur ATC
  function preflightInjectId(e) {
    const vid = getSelectedVariantId();
    if (vid) ensureIdInForm(vid);
  }

  // Écoute “submit” en capture (passe AVANT les scripts du thème)
  form.addEventListener('submit', preflightInjectId, true);
  // Écoute le clic sur le bouton ATC (utile si le thème remplace la soumission)
  addBtn.addEventListener('click', preflightInjectId, true);

  // 5) Filet de sécurité : si le thème empêche le submit, on ajoute en AJAX
  form.addEventListener('submit', async function ajaxFallback(e){
    // On laisse le thème agir… mais si, dans ce même tick, il a empêché l’envoi,
    // on déclenche un ajout AJAX en dernier recours.
    // Heuristique : si le bouton ATC reste enabled et qu’aucun id n’est présent dans formData, on force.
    setTimeout(async () => {
      try {
        const fd = new FormData(form);
        const id = fd.get('id');
        if (!id) {
          const vid = getSelectedVariantId();
          if (!vid) return;
          fd.set('id', vid);
        }
        // Certains thèmes postent eux-mêmes : si un mini-panier s’est ouvert, on ne fait rien.
        // Ici, on teste la présence d’un overlay/cart drawer “ouvert” commun (si non présent, on tente l’AJAX).
        const drawerOpen = document.querySelector('[data-cart-drawer].is-open, .cart-drawer.is-open, .js-cartDrawer.is-open');
        if (drawerOpen) return;

        // Fallback: ajout AJAX
        const res = await fetch('/cart/add.js', { method: 'POST', body: fd, headers: { 'Accept': 'application/json' }});
        if (!res.ok) throw new Error('AJAX add failed');
        const line = await res.json();
        // Tentatives d’ouverture du tiroir (selon conventions usuelles)
        document.dispatchEvent(new CustomEvent('cart:refresh', {detail:{source:'cvs'}}));
        document.dispatchEvent(new CustomEvent('cart:open', {detail:{source:'cvs'}}));
        document.body.classList.add('cart-open'); // certains thèmes lisent cette classe
        // Dernier recours : cliquer un éventuel bouton d’ouverture
        const opener = document.querySelector('[data-cart-drawer-open], [data-action="open-cart"], .js-openCartDrawer');
        if (opener) opener.click();
      } catch(err) { console.warn('[CVS] Fallback AJAX error:', err); }
    }, 0);
  }, { once: true }); // on attache une seule fois

  // 6) À l’initialisation, aligne le form sur la carte déjà “selected”
  const initialVid = getSelectedVariantId();
  if (initialVid) ensureIdInForm(initialVid);
});
</script>


