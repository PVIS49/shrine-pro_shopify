<div id="cvs-{{ section.id }}-{{ block.id }}" class="custom-variant-selector">

  {% assign displayed_variants = product.variants | slice: 0, 3 %}

  {% for variant in displayed_variants %}
    <label class="custom-variant-selector__block{% if forloop.first %} selected{% endif %}"
       data-variant-id="{{ variant.id }}"
       data-o1="{{ variant.option1 | escape }}"
       data-o2="{{ variant.option2 | escape }}"
       data-o3="{{ variant.option3 | escape }}">

      <span class="variant-indicator"></span>
      <input type="radio" name="custom_variant_id" class="hidden-radio" value="{{ variant.id }}" {% if forloop.first %}checked{% endif %}>
      <div class="variant-card">
        {% if forloop.index == 2 %}
  <div class="variant-badge">Économisez 50€</div>
{% endif %}

    {% if variant.metafields.custom.custom_image %}
  <img
    src="{{ variant.metafields.custom.custom_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% elsif variant.featured_media %}
  <img
    src="{{ variant.featured_media.preview_image | image_url: width: 300 }}"
    alt="{{ variant.title }}"
    class="{% if forloop.index == 1 %}img-small{% else %}img-large{% endif %}">
{% endif %}


        <p class="variant-label">{{ variant.title }}</p>
<div class="variant-price">
  {% if variant.compare_at_price > variant.price %}
    <span class="old-price">{{ variant.compare_at_price | money }}</span>
  {% endif %}
  <span class="current-price">{{ variant.price | money }}</span>
</div>
      </div>
    </label>
  {% endfor %}
</div>

<style>
.custom-variant-selector{
  display:grid;
  grid-template-columns:repeat(2,minmax(0,1fr)); /* deux colonnes permanentes */
  gap:12px;
  margin-top:20px;
}
  .hidden-radio {
  display: none;
}


/* chaque carte occupe exactement sa colonne */
.custom-variant-selector__block{
  width:100%;                 /* ← la grille gère la largeur */
  box-sizing:border-box;
  border:2px solid #ccc;
  border-radius:10px;
  padding:10px;
  text-align:center;
  position:relative;
  cursor:pointer;
  transition:all .2s ease;
}
.variant-card {
  display: flex;
  flex-direction: column;
  justify-content: flex-end; /* aligne le contenu vers le bas */
  height: 150px; /* fixe une même hauteur pour toutes les cartes */
}

.variant-card img.img-small {
  height: 50px;
  object-fit: contain;
  align-self: center;
}

.variant-card img.img-large {
  height: 70px;
  object-fit: contain;
  align-self: center;
}

.custom-variant-selector__block.selected{
  border-color:#000;
  background:#f6f6f6;
}

/*  décorations inchangées  */
.variant-badge {
  position: absolute;
  top: 6px;
  left: 50%;
  transform: translateX(-50%);
  background: #1A1A1A;
  color: white;
  padding: 4px 10px;
  font-size: 12px;
  border-radius: 6px;
  white-space: nowrap;       /* empêche le retour à la ligne */
  overflow: hidden;          /* masque le débordement */
  text-overflow: ellipsis;   /* ajoute "..." si trop long */
  max-width: 90%;            /* limite la largeur */
  z-index: 2;
}
  .variant-price {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 6px;
  margin-top: 4px;
  font-size: 14px;
}

.old-price {
  text-decoration: line-through;
  color: #999;
  font-size: 14px;
}

.current-price {
  font-weight: bold;
  color: #000;
}


.variant-indicator{
  width:10px;height:10px;border-radius:50%;
  border:2px solid #000;position:absolute;top:10px;right:10px;
}
.custom-variant-selector__block.selected .variant-indicator{background:#000}

</style>

<script>
(() => {
  document.addEventListener('DOMContentLoaded', () => {
    const root = document.getElementById("cvs-{{ section.id }}-{{ block.id }}")
              || document.querySelector('.custom-variant-selector');
    if (!root) return;

    const VARIANTS  = {{ product.variants | json }};
    const OPTS_CNT  = {{ product.options | size }};
    const sectionId = "{{ section.id }}";

    // Eléments du thème (vus dans main-product.liquid)
    const stickyBtn = document.getElementById(`SectionAtcBtn-${sectionId}`); // bouton sticky (type="button") :contentReference[oaicite:2]{index=2}
    const productForm = document.getElementById(`product-form-${sectionId}`); // form rendu par 'buy-buttons' (dans le snippet) :contentReference[oaicite:3]{index=3}
    const qtyInput = document.getElementById(`Quantity-${sectionId}`) || (productForm ? productForm.querySelector('input[name="quantity"]') : null);

    const cards = Array.from(root.querySelectorAll('.custom-variant-selector__block'));
    if (!cards.length) return;

    // --- Helpers variants
    const byId = id => VARIANTS.find(v => String(v.id) === String(id));
    const byOptions = (o1,o2,o3) => VARIANTS.find(v => {
      const o = v.options;
      return (o[0]==o1) && (OPTS_CNT<2 || o[1]==o2) && (OPTS_CNT<3 || o[2]==o3);
    });

    const getSelectedCard = () => root.querySelector('.custom-variant-selector__block.selected') || cards[0] || null;
    const getSelectedVariant = () => {
      const c = getSelectedCard(); if (!c) return null;
      return byOptions(c.dataset.o1, c.dataset.o2, c.dataset.o3) || (c.dataset.variantId ? byId(c.dataset.variantId) : null);
    };
    const getQty = () => {
      const n = qtyInput ? parseInt(qtyInput.value,10) : 1;
      return (isNaN(n)||n<=0) ? 1 : n;
    };

    // --- Sync du champ name="id" du vrai form (snippet buy-buttons)
    function ensureFormHasVariant(variantId){
      if (!productForm) return;
      // 1) <select name="id"> prioritaire si présent
      const sel = productForm.querySelector('select[name="id"]');
      if (sel) {
        if (String(sel.value) !== String(variantId)){
          sel.value = String(variantId);
          sel.dispatchEvent(new Event('input',{bubbles:true}));
          sel.dispatchEvent(new Event('change',{bubbles:true}));
        }
        return;
      }
      // 2) input hidden name="id"
      let hid = productForm.querySelector('input[name="id"]');
      if (!hid) {
        hid = document.createElement('input');
        hid.type = 'hidden'; hid.name = 'id';
        productForm.appendChild(hid);
      }
      if (String(hid.value) !== String(variantId)){
        hid.value = String(variantId);
        productForm.dispatchEvent(new Event('input',{bubbles:true}));
        productForm.dispatchEvent(new Event('change',{bubbles:true}));
      }
    }

    // --- Click cartes: sélection + sync form
    cards.forEach(card=>{
      card.addEventListener('click', () => {
        cards.forEach(b=>b.classList.remove('selected'));
        card.classList.add('selected');
        const r=card.querySelector('input[type="radio"]'); if (r) r.checked = true;

        const v = getSelectedVariant();
        if (v) ensureFormHasVariant(v.id);
      });
    });

    // --- Init visuelle
    (function init(){
      // essaie d’aligner sur l’ID du form si déjà défini
      let currentId = null;
      const idField = productForm && (productForm.querySelector('select[name="id"], input[name="id"]'));
      if (idField) currentId = idField.value;
      if (!currentId) currentId = "{{ product.selected_or_first_available_variant.id }}";

      const initial = cards.find(b => String(b.dataset.variantId)===String(currentId)) || cards[0];
      if (initial){
        cards.forEach(b=>b.classList.remove('selected'));
        initial.classList.add('selected');
        const r=initial.querySelector('input[type="radio"]'); if (r) r.checked = true;
        const v = getSelectedVariant(); if (v) ensureFormHasVariant(v.id);
      }
    })();

    // --- Section Rendering (drawer + bubble)
    const SECTION_KEYS = ['cart-drawer','cart-icon-bubble','cart-notification','header','main-cart-items','cart-items'];
    const sectionsParam = encodeURIComponent(SECTION_KEYS.join(','));
    const sectionsUrl   = encodeURIComponent(window.location.pathname);

    function replaceSectionsFromResponse(map){
      if (!map) return false;
      let replaced = false;
      Object.keys(map).forEach(k=>{
        const html = map[k]; if (!html) return;
        const tmp = document.createElement('div'); tmp.innerHTML = html.trim();
        const repl = tmp.querySelector('[data-section-id]') || tmp.firstElementChild;
        if (!repl) return;
        const sid = repl.getAttribute('data-section-id');
        const current = sid && document.querySelector(`[data-section-id="${sid}"]`);
        if (current){ current.replaceWith(repl); replaced = true; }
      });
      return replaced;
    }

    function openDrawer(){
      // Dawn-like web component
      const drawer = document.querySelector('cart-drawer, #CartDrawer');
      if (drawer && typeof drawer.open === 'function') { try{ drawer.open(); }catch(e){} }
      // Fallbacks fréquents
      document.dispatchEvent(new CustomEvent('cart:open',{detail:{source:'cvs'}}));
      document.body.classList.add('cart-open','drawer--cart-open');
      const opener = document.querySelector('[data-cart-drawer-open], [data-action="open-cart"], .js-openCartDrawer, .header__icon--cart, .cart-toggle, .open-cart, #CartDrawer-Open');
      if (opener) opener.click();
    }

    async function addToCartAjax(variantId, qty){
      const fd = new FormData();
      fd.set('id', variantId);
      fd.set('quantity', qty);

      const res = await fetch(`/cart/add.js?sections=${sectionsParam}&sections_url=${sectionsUrl}`, {
        method:'POST', body:fd, headers:{'Accept':'application/json'}
      });
      if (!res.ok) throw new Error('add.js failed');
      const json = await res.json();

      // 1) Si cart-drawer supporte renderContents(json)
      const drawer = document.querySelector('cart-drawer, #CartDrawer');
      if (drawer && typeof drawer.renderContents === 'function'){
        try{ drawer.renderContents(json); }catch(e){}
      }

      // 2) Remplacement direct des sections
      const map = json.sections || json;
      const swapped = replaceSectionsFromResponse(map);

      // 3) Bulle compteur en dernier recours
      if (!swapped){
        try{
          const c = await (await fetch('/cart.js', {headers:{'Accept':'application/json'}})).json();
          const cnt = Array.isArray(c.items) ? c.items.reduce((s,i)=>s+i.quantity,0) : 0;
          const bubble = document.querySelector('.cart-count-bubble, [data-cart-count-bubble]');
          if (bubble){
            const span = bubble.querySelector('span') || bubble;
            span.textContent = String(cnt);
            bubble.classList.toggle('hidden', cnt<=0);
          }
        }catch(e){}
      }

      // 4) Open + events
      openDrawer();
      document.dispatchEvent(new CustomEvent('cart:refresh',{detail:{source:'cvs'}}));
      document.dispatchEvent(new CustomEvent('cart:updated',{detail:{source:'cvs'}}));
      document.dispatchEvent(new CustomEvent('product:added',{detail:{source:'cvs', id:variantId, qty}}));
    }

    // --- Hook STICKY ATC (type="button")
    if (stickyBtn){
      let busy = false;
      stickyBtn.addEventListener('click', async (e)=>{
        e.preventDefault();
        if (busy) return;
        const v = getSelectedVariant();
        if (!v || !v.available) return;
        ensureFormHasVariant(v.id);
        busy = true; stickyBtn.classList.add('is-loading'); stickyBtn.setAttribute('aria-disabled','true');
        try{
          await addToCartAjax(v.id, getQty());
        }catch(err){
          console.warn('[CVS] sticky add error', err);
        }finally{
          stickyBtn.classList.remove('is-loading'); stickyBtn.removeAttribute('aria-disabled'); busy=false;
        }
      });
    }

    // --- Hook FORM principal (si le snippet buy-buttons rend un form classique)
    if (productForm){
      let inflight = false;
      productForm.addEventListener('submit', async (e)=>{
        // On prend la main pour garantir le refresh du drawer
        e.preventDefault();
        if (inflight) return;
        const v = getSelectedVariant();
        if (!v || !v.available) return;
        ensureFormHasVariant(v.id);
        inflight = true;
        // état visuel sur le submit principal s'il existe
        const submit = productForm.querySelector('button[name="add"], button[type="submit"]:not(.shopify-payment-button__button)');
        if (submit){ submit.classList.add('is-loading'); submit.setAttribute('aria-disabled','true'); }
        try{
          await addToCartAjax(v.id, getQty());
        }catch(err){
          console.warn('[CVS] form add error', err);
        }finally{
          if (submit){ submit.classList.remove('is-loading'); submit.removeAttribute('aria-disabled'); }
          inflight = false;
        }
      }, true);
    }
  });
})();
</script>
